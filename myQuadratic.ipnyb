{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load training and testing data set\n",
    "train_df = pd.read_csv('C:/Users/16475/Desktop/Neural Nets/neural-nets-master/examples/quadratic/data/train.csv')\n",
    "test_df = pd.read_csv('C:/Users/16475/Desktop/Neural Nets/neural-nets-master/examples/quadratic/data/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          x          y  color\n",
      "0 -4.956506  25.706334    0.0\n",
      "1  2.897218  10.359784    0.0\n",
      "2 -4.488273  22.113311    0.0\n",
      "3  3.823152  15.665060    0.0\n",
      "4  4.425201  21.118726    0.0\n"
     ]
    }
   ],
   "source": [
    "print(train_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1000/1000 [==============================] - 1s 734us/step - loss: 0.9506 - accuracy: 0.6345\n",
      "Epoch 2/10\n",
      "1000/1000 [==============================] - 1s 717us/step - loss: 0.4784 - accuracy: 0.7755\n",
      "Epoch 3/10\n",
      "1000/1000 [==============================] - 1s 670us/step - loss: 0.3732 - accuracy: 0.8276\n",
      "Epoch 4/10\n",
      "1000/1000 [==============================] - 1s 749us/step - loss: 0.2937 - accuracy: 0.8807\n",
      "Epoch 5/10\n",
      "1000/1000 [==============================] - 1s 682us/step - loss: 0.2514 - accuracy: 0.9025\n",
      "Epoch 6/10\n",
      "1000/1000 [==============================] - 1s 652us/step - loss: 0.2155 - accuracy: 0.9244\n",
      "Epoch 7/10\n",
      "1000/1000 [==============================] - 1s 704us/step - loss: 0.1829 - accuracy: 0.9352\n",
      "Epoch 8/10\n",
      "1000/1000 [==============================] - 1s 875us/step - loss: 0.1754 - accuracy: 0.9382\n",
      "Epoch 9/10\n",
      "1000/1000 [==============================] - 1s 700us/step - loss: 0.1640 - accuracy: 0.9396\n",
      "Epoch 10/10\n",
      "1000/1000 [==============================] - 1s 697us/step - loss: 0.1304 - accuracy: 0.9570\n",
      "Evaluation\n",
      "32/32 [==============================] - 0s 677us/step - loss: 0.0475 - accuracy: 0.9910\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.047547388821840286, 0.9909999966621399]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.shuffle(train_df.values)\n",
    "\n",
    "# Define 2 by 4 by 2 model\n",
    "model = keras.Sequential([\n",
    "    keras.layers.Dense(16,input_shape=(2,),activation='relu'),\n",
    "    keras.layers.Dropout(0.2), # Drops out 20% of the hidden layer (could improve model)\n",
    "    keras.layers.Dense(32, activation = 'relu'),\n",
    "    keras.layers.Dense(2, activation='sigmoid')])\n",
    "\n",
    "# Compile model with optimizer, loss function, and accuracy(use f1 scores later)\n",
    "model.compile(optimizer='adam',\n",
    "              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "              metrics=['accuracy']\n",
    "             )\n",
    "\n",
    "# Stack columns together (unroll)\n",
    "x = np.column_stack((train_df.x.values, train_df.y.values))\n",
    "y = train_df.color.values\n",
    "\n",
    "# Fit training data to our network\n",
    "model.fit(x, y, batch_size=4, epochs=10)\n",
    "\n",
    "# Unroll the testing data\n",
    "test_x = np.column_stack((test_df.x.values, test_df.y.values))\n",
    "\n",
    "\n",
    "print('Evaluation')\n",
    "# Evaluate the model\n",
    "model.evaluate(test_x, test_df.color.values)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
